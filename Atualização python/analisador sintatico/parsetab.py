
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD_ASSIGN ASSIGN BIBLIOTECA BOOLEAN CHAR COMMA CONDICIONAL DIVIDE DIV_ASSIGN DOUBLE ELSE EQ FLOAT FOR FUNCAO_PRINCIPAL FUNCAO_RECURSIVA GE GT ID IF INT LBRACE LBRACKET LE LPAREN LT MINUS MOD MOD_ASSIGN MUL_ASSIGN NE NUM_DEC NUM_INT OPERADOR PALAVRA_RES PLUS PRINTF RBRACE RBRACKET RETORNO RETURN RPAREN SEMICOLON SIMBOLO_ESP SUB_ASSIGN TEXTO TIMES VOID WHILEprogram : declaration_listdeclaration_list : declaration_list declaration\n                        | declarationdeclaration : var_declaration\n                   | fun_declarationvar_declaration : type_specifier ID SEMICOLON\n                       | type_specifier ID ASSIGN expression SEMICOLONtype_specifier : INT\n                      | FLOAT\n                      | DOUBLE\n                      | CHAR\n                      | BOOLEANfun_declaration : type_specifier FUNCAO_PRINCIPAL LPAREN RPAREN compound_stmtparams : param_list\n              | VOIDparam_list : param_list COMMA param\n                  | paramparam : type_specifier IDcompound_stmt : LBRACE local_declarations statement_list RBRACElocal_declarations : local_declarations var_declaration\n                          | emptystatement_list : statement_list statement\n                      | emptystatement : expression_stmt\n                 | compound_stmt\n                 | selection_stmt\n                 | iteration_stmt\n                 | return_stmt\n                 | print_stmtexpression_stmt : expression SEMICOLON\n                       | SEMICOLONselection_stmt : IF LPAREN expression RPAREN statement ELSE statement\n                      | IF LPAREN expression RPAREN statementiteration_stmt : WHILE LPAREN expression RPAREN statement\n                      | FOR LPAREN expression_stmt expression_stmt expression RPAREN statementreturn_stmt : RETURN SEMICOLON\n                   | RETURN expression SEMICOLONprint_stmt : PRINTF LPAREN TEXTO RPAREN SEMICOLON\n                  | PRINTF LPAREN expression RPAREN SEMICOLONexpression : assignment\n                  | simple_expressionassignment : var ASSIGN expression\n                  | var ADD_ASSIGN expression\n                  | var SUB_ASSIGN expression\n                  | var MUL_ASSIGN expression\n                  | var DIV_ASSIGN expression\n                  | var MOD_ASSIGN expressionvar : ID\n           | ID LBRACKET expression RBRACKETsimple_expression : additive_expression relop additive_expression\n                         | additive_expressionrelop : GE\n             | LE\n             | GT\n             | LT\n             | EQ\n             | NEadditive_expression : additive_expression addop term\n                           | termaddop : PLUS\n             | MINUSterm : term mulop factor\n            | factormulop : TIMES\n             | DIVIDE\n             | MODfactor : LPAREN expression RPAREN\n              | var\n              | call\n              | NUM_INT\n              | NUM_DEC\n              | TEXTOcall : ID LPAREN args RPARENargs : arg_list\n            | emptyarg_list : arg_list COMMA expression\n                | expressionempty :'
    
_lr_action_items = {'INT':([0,2,3,4,5,12,15,34,56,57,74,75,80,84,],[7,7,-3,-4,-5,-2,-6,-7,-13,-78,7,-21,-20,-19,]),'FLOAT':([0,2,3,4,5,12,15,34,56,57,74,75,80,84,],[8,8,-3,-4,-5,-2,-6,-7,-13,-78,8,-21,-20,-19,]),'DOUBLE':([0,2,3,4,5,12,15,34,56,57,74,75,80,84,],[9,9,-3,-4,-5,-2,-6,-7,-13,-78,9,-21,-20,-19,]),'CHAR':([0,2,3,4,5,12,15,34,56,57,74,75,80,84,],[10,10,-3,-4,-5,-2,-6,-7,-13,-78,10,-21,-20,-19,]),'BOOLEAN':([0,2,3,4,5,12,15,34,56,57,74,75,80,84,],[11,11,-3,-4,-5,-2,-6,-7,-13,-78,11,-21,-20,-19,]),'$end':([1,2,3,4,5,12,15,34,56,84,],[0,-1,-3,-4,-5,-2,-6,-7,-13,-19,]),'ID':([6,7,8,9,10,11,15,16,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,74,75,78,79,80,81,82,84,85,86,87,88,89,90,91,93,97,99,100,101,102,103,105,108,109,112,113,114,117,118,120,121,122,123,124,125,],[13,-8,-9,-10,-11,-12,-6,18,18,18,18,-7,18,18,18,18,18,18,18,18,-52,-53,-54,-55,-56,-57,-60,-61,18,-64,-65,-66,-78,-78,-21,18,18,-20,-23,13,-19,-22,-24,-25,-26,-27,-28,-29,-31,18,-30,18,18,18,-36,18,18,-37,18,18,18,-33,-34,-38,-39,18,18,-32,-35,]),'FUNCAO_PRINCIPAL':([6,7,8,9,10,11,],[14,-8,-9,-10,-11,-12,]),'SEMICOLON':([13,15,18,19,20,21,22,23,24,25,27,28,29,30,34,57,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,84,85,86,87,88,89,90,91,92,93,97,99,102,103,104,108,109,112,113,115,116,117,118,120,121,122,123,124,125,],[15,-6,-48,34,-40,-41,-68,-51,-59,-63,-69,-70,-71,-72,-7,-78,-42,-43,-44,-45,-46,-47,-50,-68,-58,-62,-67,-78,-21,-49,-73,93,-20,-23,-19,-22,-24,-25,-26,-27,-28,-29,99,-31,103,-30,93,-36,109,93,-37,93,93,120,121,-33,-34,-38,-39,93,93,-32,-35,]),'ASSIGN':([13,18,22,76,],[16,-48,35,-49,]),'LPAREN':([14,15,16,18,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,74,75,78,79,80,81,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,105,108,109,112,113,114,117,118,120,121,122,123,124,125,],[17,-6,26,33,26,26,26,-7,26,26,26,26,26,26,26,26,-52,-53,-54,-55,-56,-57,-60,-61,26,-64,-65,-66,-78,-78,-21,26,26,-20,-23,-19,-22,-24,-25,-26,-27,-28,-29,-31,100,101,102,26,105,-30,26,26,26,-36,26,26,-37,26,26,26,-33,-34,-38,-39,26,26,-32,-35,]),'RBRACE':([15,34,57,74,75,79,80,81,84,85,86,87,88,89,90,91,93,99,103,109,117,118,120,121,124,125,],[-6,-7,-78,-78,-21,84,-20,-23,-19,-22,-24,-25,-26,-27,-28,-29,-31,-30,-36,-37,-33,-34,-38,-39,-32,-35,]),'LBRACE':([15,31,34,57,74,75,79,80,81,84,85,86,87,88,89,90,91,93,99,103,109,112,113,117,118,120,121,122,123,124,125,],[-6,57,-7,-78,-78,-21,57,-20,-23,-19,-22,-24,-25,-26,-27,-28,-29,-31,-30,-36,-37,57,57,-33,-34,-38,-39,57,57,-32,-35,]),'IF':([15,34,57,74,75,79,80,81,84,85,86,87,88,89,90,91,93,99,103,109,112,113,117,118,120,121,122,123,124,125,],[-6,-7,-78,-78,-21,94,-20,-23,-19,-22,-24,-25,-26,-27,-28,-29,-31,-30,-36,-37,94,94,-33,-34,-38,-39,94,94,-32,-35,]),'WHILE':([15,34,57,74,75,79,80,81,84,85,86,87,88,89,90,91,93,99,103,109,112,113,117,118,120,121,122,123,124,125,],[-6,-7,-78,-78,-21,95,-20,-23,-19,-22,-24,-25,-26,-27,-28,-29,-31,-30,-36,-37,95,95,-33,-34,-38,-39,95,95,-32,-35,]),'FOR':([15,34,57,74,75,79,80,81,84,85,86,87,88,89,90,91,93,99,103,109,112,113,117,118,120,121,122,123,124,125,],[-6,-7,-78,-78,-21,96,-20,-23,-19,-22,-24,-25,-26,-27,-28,-29,-31,-30,-36,-37,96,96,-33,-34,-38,-39,96,96,-32,-35,]),'RETURN':([15,34,57,74,75,79,80,81,84,85,86,87,88,89,90,91,93,99,103,109,112,113,117,118,120,121,122,123,124,125,],[-6,-7,-78,-78,-21,97,-20,-23,-19,-22,-24,-25,-26,-27,-28,-29,-31,-30,-36,-37,97,97,-33,-34,-38,-39,97,97,-32,-35,]),'PRINTF':([15,34,57,74,75,79,80,81,84,85,86,87,88,89,90,91,93,99,103,109,112,113,117,118,120,121,122,123,124,125,],[-6,-7,-78,-78,-21,98,-20,-23,-19,-22,-24,-25,-26,-27,-28,-29,-31,-30,-36,-37,98,98,-33,-34,-38,-39,98,98,-32,-35,]),'NUM_INT':([15,16,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,74,75,78,79,80,81,84,85,86,87,88,89,90,91,93,97,99,100,101,102,103,105,108,109,112,113,114,117,118,120,121,122,123,124,125,],[-6,28,28,28,28,-7,28,28,28,28,28,28,28,28,-52,-53,-54,-55,-56,-57,-60,-61,28,-64,-65,-66,-78,-78,-21,28,28,-20,-23,-19,-22,-24,-25,-26,-27,-28,-29,-31,28,-30,28,28,28,-36,28,28,-37,28,28,28,-33,-34,-38,-39,28,28,-32,-35,]),'NUM_DEC':([15,16,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,74,75,78,79,80,81,84,85,86,87,88,89,90,91,93,97,99,100,101,102,103,105,108,109,112,113,114,117,118,120,121,122,123,124,125,],[-6,29,29,29,29,-7,29,29,29,29,29,29,29,29,-52,-53,-54,-55,-56,-57,-60,-61,29,-64,-65,-66,-78,-78,-21,29,29,-20,-23,-19,-22,-24,-25,-26,-27,-28,-29,-31,29,-30,29,29,29,-36,29,29,-37,29,29,29,-33,-34,-38,-39,29,29,-32,-35,]),'TEXTO':([15,16,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,74,75,78,79,80,81,84,85,86,87,88,89,90,91,93,97,99,100,101,102,103,105,108,109,112,113,114,117,118,120,121,122,123,124,125,],[-6,30,30,30,30,-7,30,30,30,30,30,30,30,30,-52,-53,-54,-55,-56,-57,-60,-61,30,-64,-65,-66,-78,-78,-21,30,30,-20,-23,-19,-22,-24,-25,-26,-27,-28,-29,-31,30,-30,30,30,30,-36,110,30,-37,30,30,30,-33,-34,-38,-39,30,30,-32,-35,]),'RPAREN':([17,18,20,21,22,23,24,25,27,28,29,30,33,55,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,76,77,83,106,107,110,111,119,],[31,-48,-40,-41,-68,-51,-59,-63,-69,-70,-71,-72,-78,73,77,-74,-75,-77,-42,-43,-44,-45,-46,-47,-50,-68,-58,-62,-67,-49,-73,-76,112,113,115,116,123,]),'ADD_ASSIGN':([18,22,76,],[-48,36,-49,]),'SUB_ASSIGN':([18,22,76,],[-48,37,-49,]),'MUL_ASSIGN':([18,22,76,],[-48,38,-49,]),'DIV_ASSIGN':([18,22,76,],[-48,39,-49,]),'MOD_ASSIGN':([18,22,76,],[-48,40,-49,]),'TIMES':([18,22,24,25,27,28,29,30,70,71,72,73,76,77,110,],[-48,-68,52,-63,-69,-70,-71,-72,-68,52,-62,-67,-49,-73,-72,]),'DIVIDE':([18,22,24,25,27,28,29,30,70,71,72,73,76,77,110,],[-48,-68,53,-63,-69,-70,-71,-72,-68,53,-62,-67,-49,-73,-72,]),'MOD':([18,22,24,25,27,28,29,30,70,71,72,73,76,77,110,],[-48,-68,54,-63,-69,-70,-71,-72,-68,54,-62,-67,-49,-73,-72,]),'GE':([18,22,23,24,25,27,28,29,30,70,71,72,73,76,77,110,],[-48,-68,43,-59,-63,-69,-70,-71,-72,-68,-58,-62,-67,-49,-73,-72,]),'LE':([18,22,23,24,25,27,28,29,30,70,71,72,73,76,77,110,],[-48,-68,44,-59,-63,-69,-70,-71,-72,-68,-58,-62,-67,-49,-73,-72,]),'GT':([18,22,23,24,25,27,28,29,30,70,71,72,73,76,77,110,],[-48,-68,45,-59,-63,-69,-70,-71,-72,-68,-58,-62,-67,-49,-73,-72,]),'LT':([18,22,23,24,25,27,28,29,30,70,71,72,73,76,77,110,],[-48,-68,46,-59,-63,-69,-70,-71,-72,-68,-58,-62,-67,-49,-73,-72,]),'EQ':([18,22,23,24,25,27,28,29,30,70,71,72,73,76,77,110,],[-48,-68,47,-59,-63,-69,-70,-71,-72,-68,-58,-62,-67,-49,-73,-72,]),'NE':([18,22,23,24,25,27,28,29,30,70,71,72,73,76,77,110,],[-48,-68,48,-59,-63,-69,-70,-71,-72,-68,-58,-62,-67,-49,-73,-72,]),'PLUS':([18,22,23,24,25,27,28,29,30,69,70,71,72,73,76,77,110,],[-48,-68,49,-59,-63,-69,-70,-71,-72,49,-68,-58,-62,-67,-49,-73,-72,]),'MINUS':([18,22,23,24,25,27,28,29,30,69,70,71,72,73,76,77,110,],[-48,-68,50,-59,-63,-69,-70,-71,-72,50,-68,-58,-62,-67,-49,-73,-72,]),'RBRACKET':([18,20,21,22,23,24,25,27,28,29,30,58,63,64,65,66,67,68,69,70,71,72,73,76,77,],[-48,-40,-41,-68,-51,-59,-63,-69,-70,-71,-72,76,-42,-43,-44,-45,-46,-47,-50,-68,-58,-62,-67,-49,-73,]),'COMMA':([18,20,21,22,23,24,25,27,28,29,30,60,62,63,64,65,66,67,68,69,70,71,72,73,76,77,83,],[-48,-40,-41,-68,-51,-59,-63,-69,-70,-71,-72,78,-77,-42,-43,-44,-45,-46,-47,-50,-68,-58,-62,-67,-49,-73,-76,]),'LBRACKET':([18,],[32,]),'ELSE':([84,86,87,88,89,90,91,93,99,103,109,117,118,120,121,124,125,],[-19,-24,-25,-26,-27,-28,-29,-31,-30,-36,-37,122,-34,-38,-39,-32,-35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,12,]),'var_declaration':([0,2,74,],[4,4,80,]),'fun_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,74,],[6,6,82,]),'expression':([16,26,32,33,35,36,37,38,39,40,78,79,97,100,101,102,105,108,112,113,114,122,123,],[19,55,58,62,63,64,65,66,67,68,83,92,104,106,107,92,111,92,92,92,119,92,92,]),'assignment':([16,26,32,33,35,36,37,38,39,40,78,79,97,100,101,102,105,108,112,113,114,122,123,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'simple_expression':([16,26,32,33,35,36,37,38,39,40,78,79,97,100,101,102,105,108,112,113,114,122,123,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'var':([16,26,32,33,35,36,37,38,39,40,41,42,51,78,79,97,100,101,102,105,108,112,113,114,122,123,],[22,22,22,22,22,22,22,22,22,22,70,70,70,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'additive_expression':([16,26,32,33,35,36,37,38,39,40,41,78,79,97,100,101,102,105,108,112,113,114,122,123,],[23,23,23,23,23,23,23,23,23,23,69,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'term':([16,26,32,33,35,36,37,38,39,40,41,42,78,79,97,100,101,102,105,108,112,113,114,122,123,],[24,24,24,24,24,24,24,24,24,24,24,71,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'factor':([16,26,32,33,35,36,37,38,39,40,41,42,51,78,79,97,100,101,102,105,108,112,113,114,122,123,],[25,25,25,25,25,25,25,25,25,25,25,25,72,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'call':([16,26,32,33,35,36,37,38,39,40,41,42,51,78,79,97,100,101,102,105,108,112,113,114,122,123,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'relop':([23,],[41,]),'addop':([23,69,],[42,42,]),'mulop':([24,71,],[51,51,]),'compound_stmt':([31,79,112,113,122,123,],[56,87,87,87,87,87,]),'args':([33,],[59,]),'arg_list':([33,],[60,]),'empty':([33,57,74,],[61,75,81,]),'local_declarations':([57,],[74,]),'statement_list':([74,],[79,]),'statement':([79,112,113,122,123,],[85,117,118,124,125,]),'expression_stmt':([79,102,108,112,113,122,123,],[86,108,114,86,86,86,86,]),'selection_stmt':([79,112,113,122,123,],[88,88,88,88,88,]),'iteration_stmt':([79,112,113,122,123,],[89,89,89,89,89,]),'return_stmt':([79,112,113,122,123,],[90,90,90,90,90,]),'print_stmt':([79,112,113,122,123,],[91,91,91,91,91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','parser.py',5),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',9),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',10),
  ('declaration -> var_declaration','declaration',1,'p_declaration','parser.py',14),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','parser.py',15),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration','parser.py',19),
  ('var_declaration -> type_specifier ID ASSIGN expression SEMICOLON','var_declaration',5,'p_var_declaration','parser.py',20),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',24),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',25),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','parser.py',26),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',27),
  ('type_specifier -> BOOLEAN','type_specifier',1,'p_type_specifier','parser.py',28),
  ('fun_declaration -> type_specifier FUNCAO_PRINCIPAL LPAREN RPAREN compound_stmt','fun_declaration',5,'p_fun_declaration','parser.py',32),
  ('params -> param_list','params',1,'p_params','parser.py',36),
  ('params -> VOID','params',1,'p_params','parser.py',37),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',41),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',42),
  ('param -> type_specifier ID','param',2,'p_param','parser.py',46),
  ('compound_stmt -> LBRACE local_declarations statement_list RBRACE','compound_stmt',4,'p_compound_stmt','parser.py',50),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations','parser.py',54),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations','parser.py',55),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',59),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',60),
  ('statement -> expression_stmt','statement',1,'p_statement','parser.py',64),
  ('statement -> compound_stmt','statement',1,'p_statement','parser.py',65),
  ('statement -> selection_stmt','statement',1,'p_statement','parser.py',66),
  ('statement -> iteration_stmt','statement',1,'p_statement','parser.py',67),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',68),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',69),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt','parser.py',73),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt','parser.py',74),
  ('selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement','selection_stmt',7,'p_selection_stmt','parser.py',78),
  ('selection_stmt -> IF LPAREN expression RPAREN statement','selection_stmt',5,'p_selection_stmt','parser.py',79),
  ('iteration_stmt -> WHILE LPAREN expression RPAREN statement','iteration_stmt',5,'p_iteration_stmt','parser.py',83),
  ('iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement','iteration_stmt',7,'p_iteration_stmt','parser.py',84),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','parser.py',88),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt','parser.py',89),
  ('print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON','print_stmt',5,'p_print_stmt','parser.py',93),
  ('print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON','print_stmt',5,'p_print_stmt','parser.py',94),
  ('expression -> assignment','expression',1,'p_expression','parser.py',98),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',99),
  ('assignment -> var ASSIGN expression','assignment',3,'p_assignment','parser.py',103),
  ('assignment -> var ADD_ASSIGN expression','assignment',3,'p_assignment','parser.py',104),
  ('assignment -> var SUB_ASSIGN expression','assignment',3,'p_assignment','parser.py',105),
  ('assignment -> var MUL_ASSIGN expression','assignment',3,'p_assignment','parser.py',106),
  ('assignment -> var DIV_ASSIGN expression','assignment',3,'p_assignment','parser.py',107),
  ('assignment -> var MOD_ASSIGN expression','assignment',3,'p_assignment','parser.py',108),
  ('var -> ID','var',1,'p_var','parser.py',112),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var','parser.py',113),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression','parser.py',117),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression','parser.py',118),
  ('relop -> GE','relop',1,'p_relop','parser.py',122),
  ('relop -> LE','relop',1,'p_relop','parser.py',123),
  ('relop -> GT','relop',1,'p_relop','parser.py',124),
  ('relop -> LT','relop',1,'p_relop','parser.py',125),
  ('relop -> EQ','relop',1,'p_relop','parser.py',126),
  ('relop -> NE','relop',1,'p_relop','parser.py',127),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression','parser.py',131),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression','parser.py',132),
  ('addop -> PLUS','addop',1,'p_addop','parser.py',136),
  ('addop -> MINUS','addop',1,'p_addop','parser.py',137),
  ('term -> term mulop factor','term',3,'p_term','parser.py',141),
  ('term -> factor','term',1,'p_term','parser.py',142),
  ('mulop -> TIMES','mulop',1,'p_mulop','parser.py',146),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','parser.py',147),
  ('mulop -> MOD','mulop',1,'p_mulop','parser.py',148),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',152),
  ('factor -> var','factor',1,'p_factor','parser.py',153),
  ('factor -> call','factor',1,'p_factor','parser.py',154),
  ('factor -> NUM_INT','factor',1,'p_factor','parser.py',155),
  ('factor -> NUM_DEC','factor',1,'p_factor','parser.py',156),
  ('factor -> TEXTO','factor',1,'p_factor','parser.py',157),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','parser.py',161),
  ('args -> arg_list','args',1,'p_args','parser.py',165),
  ('args -> empty','args',1,'p_args','parser.py',166),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',170),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',171),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',175),
]
