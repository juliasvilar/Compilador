Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BIBLIOTECA
    CONDICIONAL
    FUNCAO_RECURSIVA
    OPERADOR
    PALAVRA_RES
    RETORNO
    SIMBOLO_ESP

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration_list
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> fun_declaration
Rule 6     var_declaration -> type_specifier ID SEMICOLON
Rule 7     var_declaration -> type_specifier ID ASSIGN expression SEMICOLON
Rule 8     type_specifier -> INT
Rule 9     type_specifier -> FLOAT
Rule 10    type_specifier -> DOUBLE
Rule 11    type_specifier -> CHAR
Rule 12    type_specifier -> BOOLEAN
Rule 13    fun_declaration -> type_specifier FUNCAO_PRINCIPAL LPAREN RPAREN compound_stmt
Rule 14    params -> param_list
Rule 15    params -> VOID
Rule 16    param_list -> param_list COMMA param
Rule 17    param_list -> param
Rule 18    param -> type_specifier ID
Rule 19    compound_stmt -> LBRACE local_declarations statement_list RBRACE
Rule 20    local_declarations -> local_declarations var_declaration
Rule 21    local_declarations -> empty
Rule 22    statement_list -> statement_list statement
Rule 23    statement_list -> empty
Rule 24    statement -> expression_stmt
Rule 25    statement -> compound_stmt
Rule 26    statement -> selection_stmt
Rule 27    statement -> iteration_stmt
Rule 28    statement -> return_stmt
Rule 29    statement -> print_stmt
Rule 30    expression_stmt -> expression SEMICOLON
Rule 31    expression_stmt -> SEMICOLON
Rule 32    selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement
Rule 33    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 34    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 35    iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement
Rule 36    return_stmt -> RETURN SEMICOLON
Rule 37    return_stmt -> RETURN expression SEMICOLON
Rule 38    print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON
Rule 39    print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON
Rule 40    expression -> assignment
Rule 41    expression -> simple_expression
Rule 42    assignment -> var ASSIGN expression
Rule 43    assignment -> var ADD_ASSIGN expression
Rule 44    assignment -> var SUB_ASSIGN expression
Rule 45    assignment -> var MUL_ASSIGN expression
Rule 46    assignment -> var DIV_ASSIGN expression
Rule 47    assignment -> var MOD_ASSIGN expression
Rule 48    var -> ID
Rule 49    var -> ID LBRACKET expression RBRACKET
Rule 50    simple_expression -> additive_expression relop additive_expression
Rule 51    simple_expression -> additive_expression
Rule 52    relop -> GE
Rule 53    relop -> LE
Rule 54    relop -> GT
Rule 55    relop -> LT
Rule 56    relop -> EQ
Rule 57    relop -> NE
Rule 58    additive_expression -> additive_expression addop term
Rule 59    additive_expression -> term
Rule 60    addop -> PLUS
Rule 61    addop -> MINUS
Rule 62    term -> term mulop factor
Rule 63    term -> factor
Rule 64    mulop -> TIMES
Rule 65    mulop -> DIVIDE
Rule 66    mulop -> MOD
Rule 67    factor -> LPAREN expression RPAREN
Rule 68    factor -> var
Rule 69    factor -> call
Rule 70    factor -> NUM_INT
Rule 71    factor -> NUM_DEC
Rule 72    factor -> TEXTO
Rule 73    call -> ID LPAREN args RPAREN
Rule 74    args -> arg_list
Rule 75    args -> empty
Rule 76    arg_list -> arg_list COMMA expression
Rule 77    arg_list -> expression
Rule 78    empty -> <empty>

Terminals, with rules where they appear

ADD_ASSIGN           : 43
ASSIGN               : 7 42
BIBLIOTECA           : 
BOOLEAN              : 12
CHAR                 : 11
COMMA                : 16 76
CONDICIONAL          : 
DIVIDE               : 65
DIV_ASSIGN           : 46
DOUBLE               : 10
ELSE                 : 32
EQ                   : 56
FLOAT                : 9
FOR                  : 35
FUNCAO_PRINCIPAL     : 13
FUNCAO_RECURSIVA     : 
GE                   : 52
GT                   : 54
ID                   : 6 7 18 48 49 73
IF                   : 32 33
INT                  : 8
LBRACE               : 19
LBRACKET             : 49
LE                   : 53
LPAREN               : 13 32 33 34 35 38 39 67 73
LT                   : 55
MINUS                : 61
MOD                  : 66
MOD_ASSIGN           : 47
MUL_ASSIGN           : 45
NE                   : 57
NUM_DEC              : 71
NUM_INT              : 70
OPERADOR             : 
PALAVRA_RES          : 
PLUS                 : 60
PRINTF               : 38 39
RBRACE               : 19
RBRACKET             : 49
RETORNO              : 
RETURN               : 36 37
RPAREN               : 13 32 33 34 35 38 39 67 73
SEMICOLON            : 6 7 30 31 36 37 38 39
SIMBOLO_ESP          : 
SUB_ASSIGN           : 44
TEXTO                : 38 72
TIMES                : 64
VOID                 : 15
WHILE                : 34
error                : 

Nonterminals, with rules where they appear

additive_expression  : 50 50 51 58
addop                : 58
arg_list             : 74 76
args                 : 73
assignment           : 40
call                 : 69
compound_stmt        : 13 25
declaration          : 2 3
declaration_list     : 1 2
empty                : 21 23 75
expression           : 7 30 32 33 34 35 37 39 42 43 44 45 46 47 49 67 76 77
expression_stmt      : 24 35 35
factor               : 62 63
fun_declaration      : 5
iteration_stmt       : 27
local_declarations   : 19 20
mulop                : 62
param                : 16 17
param_list           : 14 16
params               : 
print_stmt           : 29
program              : 0
relop                : 50
return_stmt          : 28
selection_stmt       : 26
simple_expression    : 41
statement            : 22 32 32 33 34 35
statement_list       : 19 22
term                 : 58 59 62
type_specifier       : 6 7 13 18
var                  : 42 43 44 45 46 47 68
var_declaration      : 4 20

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration_list
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID ASSIGN expression SEMICOLON
    (13) fun_declaration -> . type_specifier FUNCAO_PRINCIPAL LPAREN RPAREN compound_stmt
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . DOUBLE
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BOOLEAN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    DOUBLE          shift and go to state 9
    CHAR            shift and go to state 10
    BOOLEAN         shift and go to state 11

    program                        shift and go to state 1
    declaration_list               shift and go to state 2
    declaration                    shift and go to state 3
    var_declaration                shift and go to state 4
    fun_declaration                shift and go to state 5
    type_specifier                 shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> declaration_list .
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID ASSIGN expression SEMICOLON
    (13) fun_declaration -> . type_specifier FUNCAO_PRINCIPAL LPAREN RPAREN compound_stmt
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . DOUBLE
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BOOLEAN

    $end            reduce using rule 1 (program -> declaration_list .)
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    DOUBLE          shift and go to state 9
    CHAR            shift and go to state 10
    BOOLEAN         shift and go to state 11

    declaration                    shift and go to state 12
    var_declaration                shift and go to state 4
    fun_declaration                shift and go to state 5
    type_specifier                 shift and go to state 6

state 3

    (3) declaration_list -> declaration .

    INT             reduce using rule 3 (declaration_list -> declaration .)
    FLOAT           reduce using rule 3 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 3 (declaration_list -> declaration .)
    CHAR            reduce using rule 3 (declaration_list -> declaration .)
    BOOLEAN         reduce using rule 3 (declaration_list -> declaration .)
    $end            reduce using rule 3 (declaration_list -> declaration .)


state 4

    (4) declaration -> var_declaration .

    INT             reduce using rule 4 (declaration -> var_declaration .)
    FLOAT           reduce using rule 4 (declaration -> var_declaration .)
    DOUBLE          reduce using rule 4 (declaration -> var_declaration .)
    CHAR            reduce using rule 4 (declaration -> var_declaration .)
    BOOLEAN         reduce using rule 4 (declaration -> var_declaration .)
    $end            reduce using rule 4 (declaration -> var_declaration .)


state 5

    (5) declaration -> fun_declaration .

    INT             reduce using rule 5 (declaration -> fun_declaration .)
    FLOAT           reduce using rule 5 (declaration -> fun_declaration .)
    DOUBLE          reduce using rule 5 (declaration -> fun_declaration .)
    CHAR            reduce using rule 5 (declaration -> fun_declaration .)
    BOOLEAN         reduce using rule 5 (declaration -> fun_declaration .)
    $end            reduce using rule 5 (declaration -> fun_declaration .)


state 6

    (6) var_declaration -> type_specifier . ID SEMICOLON
    (7) var_declaration -> type_specifier . ID ASSIGN expression SEMICOLON
    (13) fun_declaration -> type_specifier . FUNCAO_PRINCIPAL LPAREN RPAREN compound_stmt

    ID              shift and go to state 13
    FUNCAO_PRINCIPAL shift and go to state 14


state 7

    (8) type_specifier -> INT .

    ID              reduce using rule 8 (type_specifier -> INT .)
    FUNCAO_PRINCIPAL reduce using rule 8 (type_specifier -> INT .)


state 8

    (9) type_specifier -> FLOAT .

    ID              reduce using rule 9 (type_specifier -> FLOAT .)
    FUNCAO_PRINCIPAL reduce using rule 9 (type_specifier -> FLOAT .)


state 9

    (10) type_specifier -> DOUBLE .

    ID              reduce using rule 10 (type_specifier -> DOUBLE .)
    FUNCAO_PRINCIPAL reduce using rule 10 (type_specifier -> DOUBLE .)


state 10

    (11) type_specifier -> CHAR .

    ID              reduce using rule 11 (type_specifier -> CHAR .)
    FUNCAO_PRINCIPAL reduce using rule 11 (type_specifier -> CHAR .)


state 11

    (12) type_specifier -> BOOLEAN .

    ID              reduce using rule 12 (type_specifier -> BOOLEAN .)
    FUNCAO_PRINCIPAL reduce using rule 12 (type_specifier -> BOOLEAN .)


state 12

    (2) declaration_list -> declaration_list declaration .

    INT             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    BOOLEAN         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 13

    (6) var_declaration -> type_specifier ID . SEMICOLON
    (7) var_declaration -> type_specifier ID . ASSIGN expression SEMICOLON

    SEMICOLON       shift and go to state 15
    ASSIGN          shift and go to state 16


state 14

    (13) fun_declaration -> type_specifier FUNCAO_PRINCIPAL . LPAREN RPAREN compound_stmt

    LPAREN          shift and go to state 17


state 15

    (6) var_declaration -> type_specifier ID SEMICOLON .

    INT             reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    FLOAT           reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    DOUBLE          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    CHAR            reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    BOOLEAN         reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    $end            reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    RBRACE          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    SEMICOLON       reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    LBRACE          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    IF              reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    WHILE           reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    FOR             reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    RETURN          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    PRINTF          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    ID              reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    LPAREN          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    NUM_INT         reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    NUM_DEC         reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    TEXTO           reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)


state 16

    (7) var_declaration -> type_specifier ID ASSIGN . expression SEMICOLON
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    expression                     shift and go to state 19
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 17

    (13) fun_declaration -> type_specifier FUNCAO_PRINCIPAL LPAREN . RPAREN compound_stmt

    RPAREN          shift and go to state 31


state 18

    (48) var -> ID .
    (49) var -> ID . LBRACKET expression RBRACKET
    (73) call -> ID . LPAREN args RPAREN

    ASSIGN          reduce using rule 48 (var -> ID .)
    ADD_ASSIGN      reduce using rule 48 (var -> ID .)
    SUB_ASSIGN      reduce using rule 48 (var -> ID .)
    MUL_ASSIGN      reduce using rule 48 (var -> ID .)
    DIV_ASSIGN      reduce using rule 48 (var -> ID .)
    MOD_ASSIGN      reduce using rule 48 (var -> ID .)
    TIMES           reduce using rule 48 (var -> ID .)
    DIVIDE          reduce using rule 48 (var -> ID .)
    MOD             reduce using rule 48 (var -> ID .)
    GE              reduce using rule 48 (var -> ID .)
    LE              reduce using rule 48 (var -> ID .)
    GT              reduce using rule 48 (var -> ID .)
    LT              reduce using rule 48 (var -> ID .)
    EQ              reduce using rule 48 (var -> ID .)
    NE              reduce using rule 48 (var -> ID .)
    PLUS            reduce using rule 48 (var -> ID .)
    MINUS           reduce using rule 48 (var -> ID .)
    SEMICOLON       reduce using rule 48 (var -> ID .)
    RPAREN          reduce using rule 48 (var -> ID .)
    RBRACKET        reduce using rule 48 (var -> ID .)
    COMMA           reduce using rule 48 (var -> ID .)
    LBRACKET        shift and go to state 32
    LPAREN          shift and go to state 33


state 19

    (7) var_declaration -> type_specifier ID ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 34


state 20

    (40) expression -> assignment .

    SEMICOLON       reduce using rule 40 (expression -> assignment .)
    RPAREN          reduce using rule 40 (expression -> assignment .)
    RBRACKET        reduce using rule 40 (expression -> assignment .)
    COMMA           reduce using rule 40 (expression -> assignment .)


state 21

    (41) expression -> simple_expression .

    SEMICOLON       reduce using rule 41 (expression -> simple_expression .)
    RPAREN          reduce using rule 41 (expression -> simple_expression .)
    RBRACKET        reduce using rule 41 (expression -> simple_expression .)
    COMMA           reduce using rule 41 (expression -> simple_expression .)


state 22

    (42) assignment -> var . ASSIGN expression
    (43) assignment -> var . ADD_ASSIGN expression
    (44) assignment -> var . SUB_ASSIGN expression
    (45) assignment -> var . MUL_ASSIGN expression
    (46) assignment -> var . DIV_ASSIGN expression
    (47) assignment -> var . MOD_ASSIGN expression
    (68) factor -> var .

    ASSIGN          shift and go to state 35
    ADD_ASSIGN      shift and go to state 36
    SUB_ASSIGN      shift and go to state 37
    MUL_ASSIGN      shift and go to state 38
    DIV_ASSIGN      shift and go to state 39
    MOD_ASSIGN      shift and go to state 40
    TIMES           reduce using rule 68 (factor -> var .)
    DIVIDE          reduce using rule 68 (factor -> var .)
    MOD             reduce using rule 68 (factor -> var .)
    GE              reduce using rule 68 (factor -> var .)
    LE              reduce using rule 68 (factor -> var .)
    GT              reduce using rule 68 (factor -> var .)
    LT              reduce using rule 68 (factor -> var .)
    EQ              reduce using rule 68 (factor -> var .)
    NE              reduce using rule 68 (factor -> var .)
    PLUS            reduce using rule 68 (factor -> var .)
    MINUS           reduce using rule 68 (factor -> var .)
    SEMICOLON       reduce using rule 68 (factor -> var .)
    RPAREN          reduce using rule 68 (factor -> var .)
    RBRACKET        reduce using rule 68 (factor -> var .)
    COMMA           reduce using rule 68 (factor -> var .)


state 23

    (50) simple_expression -> additive_expression . relop additive_expression
    (51) simple_expression -> additive_expression .
    (58) additive_expression -> additive_expression . addop term
    (52) relop -> . GE
    (53) relop -> . LE
    (54) relop -> . GT
    (55) relop -> . LT
    (56) relop -> . EQ
    (57) relop -> . NE
    (60) addop -> . PLUS
    (61) addop -> . MINUS

    SEMICOLON       reduce using rule 51 (simple_expression -> additive_expression .)
    RPAREN          reduce using rule 51 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 51 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 51 (simple_expression -> additive_expression .)
    GE              shift and go to state 43
    LE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    EQ              shift and go to state 47
    NE              shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50

    relop                          shift and go to state 41
    addop                          shift and go to state 42

state 24

    (59) additive_expression -> term .
    (62) term -> term . mulop factor
    (64) mulop -> . TIMES
    (65) mulop -> . DIVIDE
    (66) mulop -> . MOD

    GE              reduce using rule 59 (additive_expression -> term .)
    LE              reduce using rule 59 (additive_expression -> term .)
    GT              reduce using rule 59 (additive_expression -> term .)
    LT              reduce using rule 59 (additive_expression -> term .)
    EQ              reduce using rule 59 (additive_expression -> term .)
    NE              reduce using rule 59 (additive_expression -> term .)
    PLUS            reduce using rule 59 (additive_expression -> term .)
    MINUS           reduce using rule 59 (additive_expression -> term .)
    SEMICOLON       reduce using rule 59 (additive_expression -> term .)
    RPAREN          reduce using rule 59 (additive_expression -> term .)
    RBRACKET        reduce using rule 59 (additive_expression -> term .)
    COMMA           reduce using rule 59 (additive_expression -> term .)
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    MOD             shift and go to state 54

    mulop                          shift and go to state 51

state 25

    (63) term -> factor .

    TIMES           reduce using rule 63 (term -> factor .)
    DIVIDE          reduce using rule 63 (term -> factor .)
    MOD             reduce using rule 63 (term -> factor .)
    GE              reduce using rule 63 (term -> factor .)
    LE              reduce using rule 63 (term -> factor .)
    GT              reduce using rule 63 (term -> factor .)
    LT              reduce using rule 63 (term -> factor .)
    EQ              reduce using rule 63 (term -> factor .)
    NE              reduce using rule 63 (term -> factor .)
    PLUS            reduce using rule 63 (term -> factor .)
    MINUS           reduce using rule 63 (term -> factor .)
    SEMICOLON       reduce using rule 63 (term -> factor .)
    RPAREN          reduce using rule 63 (term -> factor .)
    RBRACKET        reduce using rule 63 (term -> factor .)
    COMMA           reduce using rule 63 (term -> factor .)


state 26

    (67) factor -> LPAREN . expression RPAREN
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    expression                     shift and go to state 55
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 27

    (69) factor -> call .

    TIMES           reduce using rule 69 (factor -> call .)
    DIVIDE          reduce using rule 69 (factor -> call .)
    MOD             reduce using rule 69 (factor -> call .)
    GE              reduce using rule 69 (factor -> call .)
    LE              reduce using rule 69 (factor -> call .)
    GT              reduce using rule 69 (factor -> call .)
    LT              reduce using rule 69 (factor -> call .)
    EQ              reduce using rule 69 (factor -> call .)
    NE              reduce using rule 69 (factor -> call .)
    PLUS            reduce using rule 69 (factor -> call .)
    MINUS           reduce using rule 69 (factor -> call .)
    SEMICOLON       reduce using rule 69 (factor -> call .)
    RPAREN          reduce using rule 69 (factor -> call .)
    RBRACKET        reduce using rule 69 (factor -> call .)
    COMMA           reduce using rule 69 (factor -> call .)


state 28

    (70) factor -> NUM_INT .

    TIMES           reduce using rule 70 (factor -> NUM_INT .)
    DIVIDE          reduce using rule 70 (factor -> NUM_INT .)
    MOD             reduce using rule 70 (factor -> NUM_INT .)
    GE              reduce using rule 70 (factor -> NUM_INT .)
    LE              reduce using rule 70 (factor -> NUM_INT .)
    GT              reduce using rule 70 (factor -> NUM_INT .)
    LT              reduce using rule 70 (factor -> NUM_INT .)
    EQ              reduce using rule 70 (factor -> NUM_INT .)
    NE              reduce using rule 70 (factor -> NUM_INT .)
    PLUS            reduce using rule 70 (factor -> NUM_INT .)
    MINUS           reduce using rule 70 (factor -> NUM_INT .)
    SEMICOLON       reduce using rule 70 (factor -> NUM_INT .)
    RPAREN          reduce using rule 70 (factor -> NUM_INT .)
    RBRACKET        reduce using rule 70 (factor -> NUM_INT .)
    COMMA           reduce using rule 70 (factor -> NUM_INT .)


state 29

    (71) factor -> NUM_DEC .

    TIMES           reduce using rule 71 (factor -> NUM_DEC .)
    DIVIDE          reduce using rule 71 (factor -> NUM_DEC .)
    MOD             reduce using rule 71 (factor -> NUM_DEC .)
    GE              reduce using rule 71 (factor -> NUM_DEC .)
    LE              reduce using rule 71 (factor -> NUM_DEC .)
    GT              reduce using rule 71 (factor -> NUM_DEC .)
    LT              reduce using rule 71 (factor -> NUM_DEC .)
    EQ              reduce using rule 71 (factor -> NUM_DEC .)
    NE              reduce using rule 71 (factor -> NUM_DEC .)
    PLUS            reduce using rule 71 (factor -> NUM_DEC .)
    MINUS           reduce using rule 71 (factor -> NUM_DEC .)
    SEMICOLON       reduce using rule 71 (factor -> NUM_DEC .)
    RPAREN          reduce using rule 71 (factor -> NUM_DEC .)
    RBRACKET        reduce using rule 71 (factor -> NUM_DEC .)
    COMMA           reduce using rule 71 (factor -> NUM_DEC .)


state 30

    (72) factor -> TEXTO .

    TIMES           reduce using rule 72 (factor -> TEXTO .)
    DIVIDE          reduce using rule 72 (factor -> TEXTO .)
    MOD             reduce using rule 72 (factor -> TEXTO .)
    GE              reduce using rule 72 (factor -> TEXTO .)
    LE              reduce using rule 72 (factor -> TEXTO .)
    GT              reduce using rule 72 (factor -> TEXTO .)
    LT              reduce using rule 72 (factor -> TEXTO .)
    EQ              reduce using rule 72 (factor -> TEXTO .)
    NE              reduce using rule 72 (factor -> TEXTO .)
    PLUS            reduce using rule 72 (factor -> TEXTO .)
    MINUS           reduce using rule 72 (factor -> TEXTO .)
    SEMICOLON       reduce using rule 72 (factor -> TEXTO .)
    RPAREN          reduce using rule 72 (factor -> TEXTO .)
    RBRACKET        reduce using rule 72 (factor -> TEXTO .)
    COMMA           reduce using rule 72 (factor -> TEXTO .)


state 31

    (13) fun_declaration -> type_specifier FUNCAO_PRINCIPAL LPAREN RPAREN . compound_stmt
    (19) compound_stmt -> . LBRACE local_declarations statement_list RBRACE

    LBRACE          shift and go to state 57

    compound_stmt                  shift and go to state 56

state 32

    (49) var -> ID LBRACKET . expression RBRACKET
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    expression                     shift and go to state 58
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 33

    (73) call -> ID LPAREN . args RPAREN
    (74) args -> . arg_list
    (75) args -> . empty
    (76) arg_list -> . arg_list COMMA expression
    (77) arg_list -> . expression
    (78) empty -> .
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    RPAREN          reduce using rule 78 (empty -> .)
    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    args                           shift and go to state 59
    arg_list                       shift and go to state 60
    empty                          shift and go to state 61
    expression                     shift and go to state 62
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 34

    (7) var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .

    INT             reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    CHAR            reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    BOOLEAN         reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    $end            reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    LBRACE          reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    PRINTF          reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    ID              reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    NUM_INT         reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    NUM_DEC         reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)
    TEXTO           reduce using rule 7 (var_declaration -> type_specifier ID ASSIGN expression SEMICOLON .)


state 35

    (42) assignment -> var ASSIGN . expression
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    var                            shift and go to state 22
    expression                     shift and go to state 63
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 36

    (43) assignment -> var ADD_ASSIGN . expression
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    var                            shift and go to state 22
    expression                     shift and go to state 64
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 37

    (44) assignment -> var SUB_ASSIGN . expression
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    var                            shift and go to state 22
    expression                     shift and go to state 65
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 38

    (45) assignment -> var MUL_ASSIGN . expression
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    var                            shift and go to state 22
    expression                     shift and go to state 66
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 39

    (46) assignment -> var DIV_ASSIGN . expression
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    var                            shift and go to state 22
    expression                     shift and go to state 67
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 40

    (47) assignment -> var MOD_ASSIGN . expression
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    var                            shift and go to state 22
    expression                     shift and go to state 68
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 41

    (50) simple_expression -> additive_expression relop . additive_expression
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (73) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30
    ID              shift and go to state 18

    additive_expression            shift and go to state 69
    term                           shift and go to state 24
    factor                         shift and go to state 25
    var                            shift and go to state 70
    call                           shift and go to state 27

state 42

    (58) additive_expression -> additive_expression addop . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (73) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30
    ID              shift and go to state 18

    term                           shift and go to state 71
    factor                         shift and go to state 25
    var                            shift and go to state 70
    call                           shift and go to state 27

state 43

    (52) relop -> GE .

    LPAREN          reduce using rule 52 (relop -> GE .)
    NUM_INT         reduce using rule 52 (relop -> GE .)
    NUM_DEC         reduce using rule 52 (relop -> GE .)
    TEXTO           reduce using rule 52 (relop -> GE .)
    ID              reduce using rule 52 (relop -> GE .)


state 44

    (53) relop -> LE .

    LPAREN          reduce using rule 53 (relop -> LE .)
    NUM_INT         reduce using rule 53 (relop -> LE .)
    NUM_DEC         reduce using rule 53 (relop -> LE .)
    TEXTO           reduce using rule 53 (relop -> LE .)
    ID              reduce using rule 53 (relop -> LE .)


state 45

    (54) relop -> GT .

    LPAREN          reduce using rule 54 (relop -> GT .)
    NUM_INT         reduce using rule 54 (relop -> GT .)
    NUM_DEC         reduce using rule 54 (relop -> GT .)
    TEXTO           reduce using rule 54 (relop -> GT .)
    ID              reduce using rule 54 (relop -> GT .)


state 46

    (55) relop -> LT .

    LPAREN          reduce using rule 55 (relop -> LT .)
    NUM_INT         reduce using rule 55 (relop -> LT .)
    NUM_DEC         reduce using rule 55 (relop -> LT .)
    TEXTO           reduce using rule 55 (relop -> LT .)
    ID              reduce using rule 55 (relop -> LT .)


state 47

    (56) relop -> EQ .

    LPAREN          reduce using rule 56 (relop -> EQ .)
    NUM_INT         reduce using rule 56 (relop -> EQ .)
    NUM_DEC         reduce using rule 56 (relop -> EQ .)
    TEXTO           reduce using rule 56 (relop -> EQ .)
    ID              reduce using rule 56 (relop -> EQ .)


state 48

    (57) relop -> NE .

    LPAREN          reduce using rule 57 (relop -> NE .)
    NUM_INT         reduce using rule 57 (relop -> NE .)
    NUM_DEC         reduce using rule 57 (relop -> NE .)
    TEXTO           reduce using rule 57 (relop -> NE .)
    ID              reduce using rule 57 (relop -> NE .)


state 49

    (60) addop -> PLUS .

    LPAREN          reduce using rule 60 (addop -> PLUS .)
    NUM_INT         reduce using rule 60 (addop -> PLUS .)
    NUM_DEC         reduce using rule 60 (addop -> PLUS .)
    TEXTO           reduce using rule 60 (addop -> PLUS .)
    ID              reduce using rule 60 (addop -> PLUS .)


state 50

    (61) addop -> MINUS .

    LPAREN          reduce using rule 61 (addop -> MINUS .)
    NUM_INT         reduce using rule 61 (addop -> MINUS .)
    NUM_DEC         reduce using rule 61 (addop -> MINUS .)
    TEXTO           reduce using rule 61 (addop -> MINUS .)
    ID              reduce using rule 61 (addop -> MINUS .)


state 51

    (62) term -> term mulop . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (73) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30
    ID              shift and go to state 18

    factor                         shift and go to state 72
    var                            shift and go to state 70
    call                           shift and go to state 27

state 52

    (64) mulop -> TIMES .

    LPAREN          reduce using rule 64 (mulop -> TIMES .)
    NUM_INT         reduce using rule 64 (mulop -> TIMES .)
    NUM_DEC         reduce using rule 64 (mulop -> TIMES .)
    TEXTO           reduce using rule 64 (mulop -> TIMES .)
    ID              reduce using rule 64 (mulop -> TIMES .)


state 53

    (65) mulop -> DIVIDE .

    LPAREN          reduce using rule 65 (mulop -> DIVIDE .)
    NUM_INT         reduce using rule 65 (mulop -> DIVIDE .)
    NUM_DEC         reduce using rule 65 (mulop -> DIVIDE .)
    TEXTO           reduce using rule 65 (mulop -> DIVIDE .)
    ID              reduce using rule 65 (mulop -> DIVIDE .)


state 54

    (66) mulop -> MOD .

    LPAREN          reduce using rule 66 (mulop -> MOD .)
    NUM_INT         reduce using rule 66 (mulop -> MOD .)
    NUM_DEC         reduce using rule 66 (mulop -> MOD .)
    TEXTO           reduce using rule 66 (mulop -> MOD .)
    ID              reduce using rule 66 (mulop -> MOD .)


state 55

    (67) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 73


state 56

    (13) fun_declaration -> type_specifier FUNCAO_PRINCIPAL LPAREN RPAREN compound_stmt .

    INT             reduce using rule 13 (fun_declaration -> type_specifier FUNCAO_PRINCIPAL LPAREN RPAREN compound_stmt .)
    FLOAT           reduce using rule 13 (fun_declaration -> type_specifier FUNCAO_PRINCIPAL LPAREN RPAREN compound_stmt .)
    DOUBLE          reduce using rule 13 (fun_declaration -> type_specifier FUNCAO_PRINCIPAL LPAREN RPAREN compound_stmt .)
    CHAR            reduce using rule 13 (fun_declaration -> type_specifier FUNCAO_PRINCIPAL LPAREN RPAREN compound_stmt .)
    BOOLEAN         reduce using rule 13 (fun_declaration -> type_specifier FUNCAO_PRINCIPAL LPAREN RPAREN compound_stmt .)
    $end            reduce using rule 13 (fun_declaration -> type_specifier FUNCAO_PRINCIPAL LPAREN RPAREN compound_stmt .)


state 57

    (19) compound_stmt -> LBRACE . local_declarations statement_list RBRACE
    (20) local_declarations -> . local_declarations var_declaration
    (21) local_declarations -> . empty
    (78) empty -> .

    INT             reduce using rule 78 (empty -> .)
    FLOAT           reduce using rule 78 (empty -> .)
    DOUBLE          reduce using rule 78 (empty -> .)
    CHAR            reduce using rule 78 (empty -> .)
    BOOLEAN         reduce using rule 78 (empty -> .)
    RBRACE          reduce using rule 78 (empty -> .)
    SEMICOLON       reduce using rule 78 (empty -> .)
    LBRACE          reduce using rule 78 (empty -> .)
    IF              reduce using rule 78 (empty -> .)
    WHILE           reduce using rule 78 (empty -> .)
    FOR             reduce using rule 78 (empty -> .)
    RETURN          reduce using rule 78 (empty -> .)
    PRINTF          reduce using rule 78 (empty -> .)
    ID              reduce using rule 78 (empty -> .)
    LPAREN          reduce using rule 78 (empty -> .)
    NUM_INT         reduce using rule 78 (empty -> .)
    NUM_DEC         reduce using rule 78 (empty -> .)
    TEXTO           reduce using rule 78 (empty -> .)

    local_declarations             shift and go to state 74
    empty                          shift and go to state 75

state 58

    (49) var -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 76


state 59

    (73) call -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 77


state 60

    (74) args -> arg_list .
    (76) arg_list -> arg_list . COMMA expression

    RPAREN          reduce using rule 74 (args -> arg_list .)
    COMMA           shift and go to state 78


state 61

    (75) args -> empty .

    RPAREN          reduce using rule 75 (args -> empty .)


state 62

    (77) arg_list -> expression .

    COMMA           reduce using rule 77 (arg_list -> expression .)
    RPAREN          reduce using rule 77 (arg_list -> expression .)


state 63

    (42) assignment -> var ASSIGN expression .

    SEMICOLON       reduce using rule 42 (assignment -> var ASSIGN expression .)
    RPAREN          reduce using rule 42 (assignment -> var ASSIGN expression .)
    RBRACKET        reduce using rule 42 (assignment -> var ASSIGN expression .)
    COMMA           reduce using rule 42 (assignment -> var ASSIGN expression .)


state 64

    (43) assignment -> var ADD_ASSIGN expression .

    SEMICOLON       reduce using rule 43 (assignment -> var ADD_ASSIGN expression .)
    RPAREN          reduce using rule 43 (assignment -> var ADD_ASSIGN expression .)
    RBRACKET        reduce using rule 43 (assignment -> var ADD_ASSIGN expression .)
    COMMA           reduce using rule 43 (assignment -> var ADD_ASSIGN expression .)


state 65

    (44) assignment -> var SUB_ASSIGN expression .

    SEMICOLON       reduce using rule 44 (assignment -> var SUB_ASSIGN expression .)
    RPAREN          reduce using rule 44 (assignment -> var SUB_ASSIGN expression .)
    RBRACKET        reduce using rule 44 (assignment -> var SUB_ASSIGN expression .)
    COMMA           reduce using rule 44 (assignment -> var SUB_ASSIGN expression .)


state 66

    (45) assignment -> var MUL_ASSIGN expression .

    SEMICOLON       reduce using rule 45 (assignment -> var MUL_ASSIGN expression .)
    RPAREN          reduce using rule 45 (assignment -> var MUL_ASSIGN expression .)
    RBRACKET        reduce using rule 45 (assignment -> var MUL_ASSIGN expression .)
    COMMA           reduce using rule 45 (assignment -> var MUL_ASSIGN expression .)


state 67

    (46) assignment -> var DIV_ASSIGN expression .

    SEMICOLON       reduce using rule 46 (assignment -> var DIV_ASSIGN expression .)
    RPAREN          reduce using rule 46 (assignment -> var DIV_ASSIGN expression .)
    RBRACKET        reduce using rule 46 (assignment -> var DIV_ASSIGN expression .)
    COMMA           reduce using rule 46 (assignment -> var DIV_ASSIGN expression .)


state 68

    (47) assignment -> var MOD_ASSIGN expression .

    SEMICOLON       reduce using rule 47 (assignment -> var MOD_ASSIGN expression .)
    RPAREN          reduce using rule 47 (assignment -> var MOD_ASSIGN expression .)
    RBRACKET        reduce using rule 47 (assignment -> var MOD_ASSIGN expression .)
    COMMA           reduce using rule 47 (assignment -> var MOD_ASSIGN expression .)


state 69

    (50) simple_expression -> additive_expression relop additive_expression .
    (58) additive_expression -> additive_expression . addop term
    (60) addop -> . PLUS
    (61) addop -> . MINUS

    SEMICOLON       reduce using rule 50 (simple_expression -> additive_expression relop additive_expression .)
    RPAREN          reduce using rule 50 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 50 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 50 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50

    addop                          shift and go to state 42

state 70

    (68) factor -> var .

    TIMES           reduce using rule 68 (factor -> var .)
    DIVIDE          reduce using rule 68 (factor -> var .)
    MOD             reduce using rule 68 (factor -> var .)
    PLUS            reduce using rule 68 (factor -> var .)
    MINUS           reduce using rule 68 (factor -> var .)
    SEMICOLON       reduce using rule 68 (factor -> var .)
    RPAREN          reduce using rule 68 (factor -> var .)
    RBRACKET        reduce using rule 68 (factor -> var .)
    COMMA           reduce using rule 68 (factor -> var .)
    GE              reduce using rule 68 (factor -> var .)
    LE              reduce using rule 68 (factor -> var .)
    GT              reduce using rule 68 (factor -> var .)
    LT              reduce using rule 68 (factor -> var .)
    EQ              reduce using rule 68 (factor -> var .)
    NE              reduce using rule 68 (factor -> var .)


state 71

    (58) additive_expression -> additive_expression addop term .
    (62) term -> term . mulop factor
    (64) mulop -> . TIMES
    (65) mulop -> . DIVIDE
    (66) mulop -> . MOD

    GE              reduce using rule 58 (additive_expression -> additive_expression addop term .)
    LE              reduce using rule 58 (additive_expression -> additive_expression addop term .)
    GT              reduce using rule 58 (additive_expression -> additive_expression addop term .)
    LT              reduce using rule 58 (additive_expression -> additive_expression addop term .)
    EQ              reduce using rule 58 (additive_expression -> additive_expression addop term .)
    NE              reduce using rule 58 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 58 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 58 (additive_expression -> additive_expression addop term .)
    SEMICOLON       reduce using rule 58 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 58 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 58 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 58 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    MOD             shift and go to state 54

    mulop                          shift and go to state 51

state 72

    (62) term -> term mulop factor .

    TIMES           reduce using rule 62 (term -> term mulop factor .)
    DIVIDE          reduce using rule 62 (term -> term mulop factor .)
    MOD             reduce using rule 62 (term -> term mulop factor .)
    GE              reduce using rule 62 (term -> term mulop factor .)
    LE              reduce using rule 62 (term -> term mulop factor .)
    GT              reduce using rule 62 (term -> term mulop factor .)
    LT              reduce using rule 62 (term -> term mulop factor .)
    EQ              reduce using rule 62 (term -> term mulop factor .)
    NE              reduce using rule 62 (term -> term mulop factor .)
    PLUS            reduce using rule 62 (term -> term mulop factor .)
    MINUS           reduce using rule 62 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 62 (term -> term mulop factor .)
    RPAREN          reduce using rule 62 (term -> term mulop factor .)
    RBRACKET        reduce using rule 62 (term -> term mulop factor .)
    COMMA           reduce using rule 62 (term -> term mulop factor .)


state 73

    (67) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 67 (factor -> LPAREN expression RPAREN .)


state 74

    (19) compound_stmt -> LBRACE local_declarations . statement_list RBRACE
    (20) local_declarations -> local_declarations . var_declaration
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . empty
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID ASSIGN expression SEMICOLON
    (78) empty -> .
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . DOUBLE
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BOOLEAN

    RBRACE          reduce using rule 78 (empty -> .)
    SEMICOLON       reduce using rule 78 (empty -> .)
    LBRACE          reduce using rule 78 (empty -> .)
    IF              reduce using rule 78 (empty -> .)
    WHILE           reduce using rule 78 (empty -> .)
    FOR             reduce using rule 78 (empty -> .)
    RETURN          reduce using rule 78 (empty -> .)
    PRINTF          reduce using rule 78 (empty -> .)
    ID              reduce using rule 78 (empty -> .)
    LPAREN          reduce using rule 78 (empty -> .)
    NUM_INT         reduce using rule 78 (empty -> .)
    NUM_DEC         reduce using rule 78 (empty -> .)
    TEXTO           reduce using rule 78 (empty -> .)
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    DOUBLE          shift and go to state 9
    CHAR            shift and go to state 10
    BOOLEAN         shift and go to state 11

    statement_list                 shift and go to state 79
    var_declaration                shift and go to state 80
    empty                          shift and go to state 81
    type_specifier                 shift and go to state 82

state 75

    (21) local_declarations -> empty .

    INT             reduce using rule 21 (local_declarations -> empty .)
    FLOAT           reduce using rule 21 (local_declarations -> empty .)
    DOUBLE          reduce using rule 21 (local_declarations -> empty .)
    CHAR            reduce using rule 21 (local_declarations -> empty .)
    BOOLEAN         reduce using rule 21 (local_declarations -> empty .)
    RBRACE          reduce using rule 21 (local_declarations -> empty .)
    SEMICOLON       reduce using rule 21 (local_declarations -> empty .)
    LBRACE          reduce using rule 21 (local_declarations -> empty .)
    IF              reduce using rule 21 (local_declarations -> empty .)
    WHILE           reduce using rule 21 (local_declarations -> empty .)
    FOR             reduce using rule 21 (local_declarations -> empty .)
    RETURN          reduce using rule 21 (local_declarations -> empty .)
    PRINTF          reduce using rule 21 (local_declarations -> empty .)
    ID              reduce using rule 21 (local_declarations -> empty .)
    LPAREN          reduce using rule 21 (local_declarations -> empty .)
    NUM_INT         reduce using rule 21 (local_declarations -> empty .)
    NUM_DEC         reduce using rule 21 (local_declarations -> empty .)
    TEXTO           reduce using rule 21 (local_declarations -> empty .)


state 76

    (49) var -> ID LBRACKET expression RBRACKET .

    ASSIGN          reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    ADD_ASSIGN      reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    SUB_ASSIGN      reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    MUL_ASSIGN      reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    DIV_ASSIGN      reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    MOD_ASSIGN      reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    MOD             reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    GE              reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    LE              reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    GT              reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    LT              reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    EQ              reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    NE              reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 49 (var -> ID LBRACKET expression RBRACKET .)


state 77

    (73) call -> ID LPAREN args RPAREN .

    TIMES           reduce using rule 73 (call -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 73 (call -> ID LPAREN args RPAREN .)
    MOD             reduce using rule 73 (call -> ID LPAREN args RPAREN .)
    GE              reduce using rule 73 (call -> ID LPAREN args RPAREN .)
    LE              reduce using rule 73 (call -> ID LPAREN args RPAREN .)
    GT              reduce using rule 73 (call -> ID LPAREN args RPAREN .)
    LT              reduce using rule 73 (call -> ID LPAREN args RPAREN .)
    EQ              reduce using rule 73 (call -> ID LPAREN args RPAREN .)
    NE              reduce using rule 73 (call -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 73 (call -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 73 (call -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 73 (call -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 73 (call -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 73 (call -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 73 (call -> ID LPAREN args RPAREN .)


state 78

    (76) arg_list -> arg_list COMMA . expression
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    expression                     shift and go to state 83
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 79

    (19) compound_stmt -> LBRACE local_declarations statement_list . RBRACE
    (22) statement_list -> statement_list . statement
    (24) statement -> . expression_stmt
    (25) statement -> . compound_stmt
    (26) statement -> . selection_stmt
    (27) statement -> . iteration_stmt
    (28) statement -> . return_stmt
    (29) statement -> . print_stmt
    (30) expression_stmt -> . expression SEMICOLON
    (31) expression_stmt -> . SEMICOLON
    (19) compound_stmt -> . LBRACE local_declarations statement_list RBRACE
    (32) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) selection_stmt -> . IF LPAREN expression RPAREN statement
    (34) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (35) iteration_stmt -> . FOR LPAREN expression_stmt expression_stmt expression RPAREN statement
    (36) return_stmt -> . RETURN SEMICOLON
    (37) return_stmt -> . RETURN expression SEMICOLON
    (38) print_stmt -> . PRINTF LPAREN TEXTO RPAREN SEMICOLON
    (39) print_stmt -> . PRINTF LPAREN expression RPAREN SEMICOLON
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    RBRACE          shift and go to state 84
    SEMICOLON       shift and go to state 93
    LBRACE          shift and go to state 57
    IF              shift and go to state 94
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    RETURN          shift and go to state 97
    PRINTF          shift and go to state 98
    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    statement                      shift and go to state 85
    expression_stmt                shift and go to state 86
    compound_stmt                  shift and go to state 87
    selection_stmt                 shift and go to state 88
    iteration_stmt                 shift and go to state 89
    return_stmt                    shift and go to state 90
    print_stmt                     shift and go to state 91
    expression                     shift and go to state 92
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 80

    (20) local_declarations -> local_declarations var_declaration .

    INT             reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    FLOAT           reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    DOUBLE          reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    CHAR            reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    BOOLEAN         reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    RBRACE          reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    SEMICOLON       reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    LBRACE          reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    FOR             reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    PRINTF          reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    ID              reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    LPAREN          reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    NUM_INT         reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    NUM_DEC         reduce using rule 20 (local_declarations -> local_declarations var_declaration .)
    TEXTO           reduce using rule 20 (local_declarations -> local_declarations var_declaration .)


state 81

    (23) statement_list -> empty .

    RBRACE          reduce using rule 23 (statement_list -> empty .)
    SEMICOLON       reduce using rule 23 (statement_list -> empty .)
    LBRACE          reduce using rule 23 (statement_list -> empty .)
    IF              reduce using rule 23 (statement_list -> empty .)
    WHILE           reduce using rule 23 (statement_list -> empty .)
    FOR             reduce using rule 23 (statement_list -> empty .)
    RETURN          reduce using rule 23 (statement_list -> empty .)
    PRINTF          reduce using rule 23 (statement_list -> empty .)
    ID              reduce using rule 23 (statement_list -> empty .)
    LPAREN          reduce using rule 23 (statement_list -> empty .)
    NUM_INT         reduce using rule 23 (statement_list -> empty .)
    NUM_DEC         reduce using rule 23 (statement_list -> empty .)
    TEXTO           reduce using rule 23 (statement_list -> empty .)


state 82

    (6) var_declaration -> type_specifier . ID SEMICOLON
    (7) var_declaration -> type_specifier . ID ASSIGN expression SEMICOLON

    ID              shift and go to state 13


state 83

    (76) arg_list -> arg_list COMMA expression .

    COMMA           reduce using rule 76 (arg_list -> arg_list COMMA expression .)
    RPAREN          reduce using rule 76 (arg_list -> arg_list COMMA expression .)


state 84

    (19) compound_stmt -> LBRACE local_declarations statement_list RBRACE .

    INT             reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    FLOAT           reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    DOUBLE          reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    CHAR            reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    BOOLEAN         reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    $end            reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    RBRACE          reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    SEMICOLON       reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    LBRACE          reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    IF              reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    WHILE           reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    FOR             reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    RETURN          reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    PRINTF          reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    ID              reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    LPAREN          reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    NUM_INT         reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    NUM_DEC         reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    TEXTO           reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    ELSE            reduce using rule 19 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)


state 85

    (22) statement_list -> statement_list statement .

    RBRACE          reduce using rule 22 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 22 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 22 (statement_list -> statement_list statement .)
    IF              reduce using rule 22 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 22 (statement_list -> statement_list statement .)
    FOR             reduce using rule 22 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 22 (statement_list -> statement_list statement .)
    PRINTF          reduce using rule 22 (statement_list -> statement_list statement .)
    ID              reduce using rule 22 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 22 (statement_list -> statement_list statement .)
    NUM_INT         reduce using rule 22 (statement_list -> statement_list statement .)
    NUM_DEC         reduce using rule 22 (statement_list -> statement_list statement .)
    TEXTO           reduce using rule 22 (statement_list -> statement_list statement .)


state 86

    (24) statement -> expression_stmt .

    RBRACE          reduce using rule 24 (statement -> expression_stmt .)
    SEMICOLON       reduce using rule 24 (statement -> expression_stmt .)
    LBRACE          reduce using rule 24 (statement -> expression_stmt .)
    IF              reduce using rule 24 (statement -> expression_stmt .)
    WHILE           reduce using rule 24 (statement -> expression_stmt .)
    FOR             reduce using rule 24 (statement -> expression_stmt .)
    RETURN          reduce using rule 24 (statement -> expression_stmt .)
    PRINTF          reduce using rule 24 (statement -> expression_stmt .)
    ID              reduce using rule 24 (statement -> expression_stmt .)
    LPAREN          reduce using rule 24 (statement -> expression_stmt .)
    NUM_INT         reduce using rule 24 (statement -> expression_stmt .)
    NUM_DEC         reduce using rule 24 (statement -> expression_stmt .)
    TEXTO           reduce using rule 24 (statement -> expression_stmt .)
    ELSE            reduce using rule 24 (statement -> expression_stmt .)


state 87

    (25) statement -> compound_stmt .

    RBRACE          reduce using rule 25 (statement -> compound_stmt .)
    SEMICOLON       reduce using rule 25 (statement -> compound_stmt .)
    LBRACE          reduce using rule 25 (statement -> compound_stmt .)
    IF              reduce using rule 25 (statement -> compound_stmt .)
    WHILE           reduce using rule 25 (statement -> compound_stmt .)
    FOR             reduce using rule 25 (statement -> compound_stmt .)
    RETURN          reduce using rule 25 (statement -> compound_stmt .)
    PRINTF          reduce using rule 25 (statement -> compound_stmt .)
    ID              reduce using rule 25 (statement -> compound_stmt .)
    LPAREN          reduce using rule 25 (statement -> compound_stmt .)
    NUM_INT         reduce using rule 25 (statement -> compound_stmt .)
    NUM_DEC         reduce using rule 25 (statement -> compound_stmt .)
    TEXTO           reduce using rule 25 (statement -> compound_stmt .)
    ELSE            reduce using rule 25 (statement -> compound_stmt .)


state 88

    (26) statement -> selection_stmt .

    RBRACE          reduce using rule 26 (statement -> selection_stmt .)
    SEMICOLON       reduce using rule 26 (statement -> selection_stmt .)
    LBRACE          reduce using rule 26 (statement -> selection_stmt .)
    IF              reduce using rule 26 (statement -> selection_stmt .)
    WHILE           reduce using rule 26 (statement -> selection_stmt .)
    FOR             reduce using rule 26 (statement -> selection_stmt .)
    RETURN          reduce using rule 26 (statement -> selection_stmt .)
    PRINTF          reduce using rule 26 (statement -> selection_stmt .)
    ID              reduce using rule 26 (statement -> selection_stmt .)
    LPAREN          reduce using rule 26 (statement -> selection_stmt .)
    NUM_INT         reduce using rule 26 (statement -> selection_stmt .)
    NUM_DEC         reduce using rule 26 (statement -> selection_stmt .)
    TEXTO           reduce using rule 26 (statement -> selection_stmt .)
    ELSE            reduce using rule 26 (statement -> selection_stmt .)


state 89

    (27) statement -> iteration_stmt .

    RBRACE          reduce using rule 27 (statement -> iteration_stmt .)
    SEMICOLON       reduce using rule 27 (statement -> iteration_stmt .)
    LBRACE          reduce using rule 27 (statement -> iteration_stmt .)
    IF              reduce using rule 27 (statement -> iteration_stmt .)
    WHILE           reduce using rule 27 (statement -> iteration_stmt .)
    FOR             reduce using rule 27 (statement -> iteration_stmt .)
    RETURN          reduce using rule 27 (statement -> iteration_stmt .)
    PRINTF          reduce using rule 27 (statement -> iteration_stmt .)
    ID              reduce using rule 27 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 27 (statement -> iteration_stmt .)
    NUM_INT         reduce using rule 27 (statement -> iteration_stmt .)
    NUM_DEC         reduce using rule 27 (statement -> iteration_stmt .)
    TEXTO           reduce using rule 27 (statement -> iteration_stmt .)
    ELSE            reduce using rule 27 (statement -> iteration_stmt .)


state 90

    (28) statement -> return_stmt .

    RBRACE          reduce using rule 28 (statement -> return_stmt .)
    SEMICOLON       reduce using rule 28 (statement -> return_stmt .)
    LBRACE          reduce using rule 28 (statement -> return_stmt .)
    IF              reduce using rule 28 (statement -> return_stmt .)
    WHILE           reduce using rule 28 (statement -> return_stmt .)
    FOR             reduce using rule 28 (statement -> return_stmt .)
    RETURN          reduce using rule 28 (statement -> return_stmt .)
    PRINTF          reduce using rule 28 (statement -> return_stmt .)
    ID              reduce using rule 28 (statement -> return_stmt .)
    LPAREN          reduce using rule 28 (statement -> return_stmt .)
    NUM_INT         reduce using rule 28 (statement -> return_stmt .)
    NUM_DEC         reduce using rule 28 (statement -> return_stmt .)
    TEXTO           reduce using rule 28 (statement -> return_stmt .)
    ELSE            reduce using rule 28 (statement -> return_stmt .)


state 91

    (29) statement -> print_stmt .

    RBRACE          reduce using rule 29 (statement -> print_stmt .)
    SEMICOLON       reduce using rule 29 (statement -> print_stmt .)
    LBRACE          reduce using rule 29 (statement -> print_stmt .)
    IF              reduce using rule 29 (statement -> print_stmt .)
    WHILE           reduce using rule 29 (statement -> print_stmt .)
    FOR             reduce using rule 29 (statement -> print_stmt .)
    RETURN          reduce using rule 29 (statement -> print_stmt .)
    PRINTF          reduce using rule 29 (statement -> print_stmt .)
    ID              reduce using rule 29 (statement -> print_stmt .)
    LPAREN          reduce using rule 29 (statement -> print_stmt .)
    NUM_INT         reduce using rule 29 (statement -> print_stmt .)
    NUM_DEC         reduce using rule 29 (statement -> print_stmt .)
    TEXTO           reduce using rule 29 (statement -> print_stmt .)
    ELSE            reduce using rule 29 (statement -> print_stmt .)


state 92

    (30) expression_stmt -> expression . SEMICOLON

    SEMICOLON       shift and go to state 99


state 93

    (31) expression_stmt -> SEMICOLON .

    RBRACE          reduce using rule 31 (expression_stmt -> SEMICOLON .)
    SEMICOLON       reduce using rule 31 (expression_stmt -> SEMICOLON .)
    LBRACE          reduce using rule 31 (expression_stmt -> SEMICOLON .)
    IF              reduce using rule 31 (expression_stmt -> SEMICOLON .)
    WHILE           reduce using rule 31 (expression_stmt -> SEMICOLON .)
    FOR             reduce using rule 31 (expression_stmt -> SEMICOLON .)
    RETURN          reduce using rule 31 (expression_stmt -> SEMICOLON .)
    PRINTF          reduce using rule 31 (expression_stmt -> SEMICOLON .)
    ID              reduce using rule 31 (expression_stmt -> SEMICOLON .)
    LPAREN          reduce using rule 31 (expression_stmt -> SEMICOLON .)
    NUM_INT         reduce using rule 31 (expression_stmt -> SEMICOLON .)
    NUM_DEC         reduce using rule 31 (expression_stmt -> SEMICOLON .)
    TEXTO           reduce using rule 31 (expression_stmt -> SEMICOLON .)
    ELSE            reduce using rule 31 (expression_stmt -> SEMICOLON .)


state 94

    (32) selection_stmt -> IF . LPAREN expression RPAREN statement ELSE statement
    (33) selection_stmt -> IF . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 100


state 95

    (34) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 101


state 96

    (35) iteration_stmt -> FOR . LPAREN expression_stmt expression_stmt expression RPAREN statement

    LPAREN          shift and go to state 102


state 97

    (36) return_stmt -> RETURN . SEMICOLON
    (37) return_stmt -> RETURN . expression SEMICOLON
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 103
    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    expression                     shift and go to state 104
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 98

    (38) print_stmt -> PRINTF . LPAREN TEXTO RPAREN SEMICOLON
    (39) print_stmt -> PRINTF . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 105


state 99

    (30) expression_stmt -> expression SEMICOLON .

    RBRACE          reduce using rule 30 (expression_stmt -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 30 (expression_stmt -> expression SEMICOLON .)
    LBRACE          reduce using rule 30 (expression_stmt -> expression SEMICOLON .)
    IF              reduce using rule 30 (expression_stmt -> expression SEMICOLON .)
    WHILE           reduce using rule 30 (expression_stmt -> expression SEMICOLON .)
    FOR             reduce using rule 30 (expression_stmt -> expression SEMICOLON .)
    RETURN          reduce using rule 30 (expression_stmt -> expression SEMICOLON .)
    PRINTF          reduce using rule 30 (expression_stmt -> expression SEMICOLON .)
    ID              reduce using rule 30 (expression_stmt -> expression SEMICOLON .)
    LPAREN          reduce using rule 30 (expression_stmt -> expression SEMICOLON .)
    NUM_INT         reduce using rule 30 (expression_stmt -> expression SEMICOLON .)
    NUM_DEC         reduce using rule 30 (expression_stmt -> expression SEMICOLON .)
    TEXTO           reduce using rule 30 (expression_stmt -> expression SEMICOLON .)
    ELSE            reduce using rule 30 (expression_stmt -> expression SEMICOLON .)


state 100

    (32) selection_stmt -> IF LPAREN . expression RPAREN statement ELSE statement
    (33) selection_stmt -> IF LPAREN . expression RPAREN statement
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    expression                     shift and go to state 106
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 101

    (34) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    expression                     shift and go to state 107
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 102

    (35) iteration_stmt -> FOR LPAREN . expression_stmt expression_stmt expression RPAREN statement
    (30) expression_stmt -> . expression SEMICOLON
    (31) expression_stmt -> . SEMICOLON
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 93
    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    expression_stmt                shift and go to state 108
    expression                     shift and go to state 92
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 103

    (36) return_stmt -> RETURN SEMICOLON .

    RBRACE          reduce using rule 36 (return_stmt -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 36 (return_stmt -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 36 (return_stmt -> RETURN SEMICOLON .)
    IF              reduce using rule 36 (return_stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 36 (return_stmt -> RETURN SEMICOLON .)
    FOR             reduce using rule 36 (return_stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 36 (return_stmt -> RETURN SEMICOLON .)
    PRINTF          reduce using rule 36 (return_stmt -> RETURN SEMICOLON .)
    ID              reduce using rule 36 (return_stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 36 (return_stmt -> RETURN SEMICOLON .)
    NUM_INT         reduce using rule 36 (return_stmt -> RETURN SEMICOLON .)
    NUM_DEC         reduce using rule 36 (return_stmt -> RETURN SEMICOLON .)
    TEXTO           reduce using rule 36 (return_stmt -> RETURN SEMICOLON .)
    ELSE            reduce using rule 36 (return_stmt -> RETURN SEMICOLON .)


state 104

    (37) return_stmt -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 109


state 105

    (38) print_stmt -> PRINTF LPAREN . TEXTO RPAREN SEMICOLON
    (39) print_stmt -> PRINTF LPAREN . expression RPAREN SEMICOLON
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    TEXTO           shift and go to state 110
    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29

    expression                     shift and go to state 111
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 106

    (32) selection_stmt -> IF LPAREN expression . RPAREN statement ELSE statement
    (33) selection_stmt -> IF LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 112


state 107

    (34) iteration_stmt -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 113


state 108

    (35) iteration_stmt -> FOR LPAREN expression_stmt . expression_stmt expression RPAREN statement
    (30) expression_stmt -> . expression SEMICOLON
    (31) expression_stmt -> . SEMICOLON
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 93
    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    expression_stmt                shift and go to state 114
    expression                     shift and go to state 92
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 109

    (37) return_stmt -> RETURN expression SEMICOLON .

    RBRACE          reduce using rule 37 (return_stmt -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 37 (return_stmt -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 37 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 37 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 37 (return_stmt -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 37 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 37 (return_stmt -> RETURN expression SEMICOLON .)
    PRINTF          reduce using rule 37 (return_stmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 37 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 37 (return_stmt -> RETURN expression SEMICOLON .)
    NUM_INT         reduce using rule 37 (return_stmt -> RETURN expression SEMICOLON .)
    NUM_DEC         reduce using rule 37 (return_stmt -> RETURN expression SEMICOLON .)
    TEXTO           reduce using rule 37 (return_stmt -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 37 (return_stmt -> RETURN expression SEMICOLON .)


state 110

    (38) print_stmt -> PRINTF LPAREN TEXTO . RPAREN SEMICOLON
    (72) factor -> TEXTO .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 115
    TIMES           reduce using rule 72 (factor -> TEXTO .)
    DIVIDE          reduce using rule 72 (factor -> TEXTO .)
    MOD             reduce using rule 72 (factor -> TEXTO .)
    GE              reduce using rule 72 (factor -> TEXTO .)
    LE              reduce using rule 72 (factor -> TEXTO .)
    GT              reduce using rule 72 (factor -> TEXTO .)
    LT              reduce using rule 72 (factor -> TEXTO .)
    EQ              reduce using rule 72 (factor -> TEXTO .)
    NE              reduce using rule 72 (factor -> TEXTO .)
    PLUS            reduce using rule 72 (factor -> TEXTO .)
    MINUS           reduce using rule 72 (factor -> TEXTO .)

  ! RPAREN          [ reduce using rule 72 (factor -> TEXTO .) ]


state 111

    (39) print_stmt -> PRINTF LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 116


state 112

    (32) selection_stmt -> IF LPAREN expression RPAREN . statement ELSE statement
    (33) selection_stmt -> IF LPAREN expression RPAREN . statement
    (24) statement -> . expression_stmt
    (25) statement -> . compound_stmt
    (26) statement -> . selection_stmt
    (27) statement -> . iteration_stmt
    (28) statement -> . return_stmt
    (29) statement -> . print_stmt
    (30) expression_stmt -> . expression SEMICOLON
    (31) expression_stmt -> . SEMICOLON
    (19) compound_stmt -> . LBRACE local_declarations statement_list RBRACE
    (32) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) selection_stmt -> . IF LPAREN expression RPAREN statement
    (34) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (35) iteration_stmt -> . FOR LPAREN expression_stmt expression_stmt expression RPAREN statement
    (36) return_stmt -> . RETURN SEMICOLON
    (37) return_stmt -> . RETURN expression SEMICOLON
    (38) print_stmt -> . PRINTF LPAREN TEXTO RPAREN SEMICOLON
    (39) print_stmt -> . PRINTF LPAREN expression RPAREN SEMICOLON
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 93
    LBRACE          shift and go to state 57
    IF              shift and go to state 94
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    RETURN          shift and go to state 97
    PRINTF          shift and go to state 98
    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    expression                     shift and go to state 92
    statement                      shift and go to state 117
    expression_stmt                shift and go to state 86
    compound_stmt                  shift and go to state 87
    selection_stmt                 shift and go to state 88
    iteration_stmt                 shift and go to state 89
    return_stmt                    shift and go to state 90
    print_stmt                     shift and go to state 91
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 113

    (34) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (24) statement -> . expression_stmt
    (25) statement -> . compound_stmt
    (26) statement -> . selection_stmt
    (27) statement -> . iteration_stmt
    (28) statement -> . return_stmt
    (29) statement -> . print_stmt
    (30) expression_stmt -> . expression SEMICOLON
    (31) expression_stmt -> . SEMICOLON
    (19) compound_stmt -> . LBRACE local_declarations statement_list RBRACE
    (32) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) selection_stmt -> . IF LPAREN expression RPAREN statement
    (34) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (35) iteration_stmt -> . FOR LPAREN expression_stmt expression_stmt expression RPAREN statement
    (36) return_stmt -> . RETURN SEMICOLON
    (37) return_stmt -> . RETURN expression SEMICOLON
    (38) print_stmt -> . PRINTF LPAREN TEXTO RPAREN SEMICOLON
    (39) print_stmt -> . PRINTF LPAREN expression RPAREN SEMICOLON
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 93
    LBRACE          shift and go to state 57
    IF              shift and go to state 94
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    RETURN          shift and go to state 97
    PRINTF          shift and go to state 98
    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    expression                     shift and go to state 92
    statement                      shift and go to state 118
    expression_stmt                shift and go to state 86
    compound_stmt                  shift and go to state 87
    selection_stmt                 shift and go to state 88
    iteration_stmt                 shift and go to state 89
    return_stmt                    shift and go to state 90
    print_stmt                     shift and go to state 91
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 114

    (35) iteration_stmt -> FOR LPAREN expression_stmt expression_stmt . expression RPAREN statement
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    expression                     shift and go to state 119
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 115

    (38) print_stmt -> PRINTF LPAREN TEXTO RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 120


state 116

    (39) print_stmt -> PRINTF LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 121


state 117

    (32) selection_stmt -> IF LPAREN expression RPAREN statement . ELSE statement
    (33) selection_stmt -> IF LPAREN expression RPAREN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 122
    RBRACE          reduce using rule 33 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 33 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 33 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 33 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 33 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 33 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 33 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    PRINTF          reduce using rule 33 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 33 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 33 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUM_INT         reduce using rule 33 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUM_DEC         reduce using rule 33 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    TEXTO           reduce using rule 33 (selection_stmt -> IF LPAREN expression RPAREN statement .)

  ! ELSE            [ reduce using rule 33 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]


state 118

    (34) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    PRINTF          reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUM_INT         reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUM_DEC         reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    TEXTO           reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 119

    (35) iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression . RPAREN statement

    RPAREN          shift and go to state 123


state 120

    (38) print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON .

    RBRACE          reduce using rule 38 (print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 38 (print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON .)
    LBRACE          reduce using rule 38 (print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON .)
    IF              reduce using rule 38 (print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON .)
    WHILE           reduce using rule 38 (print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON .)
    FOR             reduce using rule 38 (print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON .)
    RETURN          reduce using rule 38 (print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON .)
    PRINTF          reduce using rule 38 (print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON .)
    ID              reduce using rule 38 (print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON .)
    LPAREN          reduce using rule 38 (print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON .)
    NUM_INT         reduce using rule 38 (print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON .)
    NUM_DEC         reduce using rule 38 (print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON .)
    TEXTO           reduce using rule 38 (print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON .)
    ELSE            reduce using rule 38 (print_stmt -> PRINTF LPAREN TEXTO RPAREN SEMICOLON .)


state 121

    (39) print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 39 (print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 39 (print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON .)
    LBRACE          reduce using rule 39 (print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 39 (print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 39 (print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 39 (print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 39 (print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON .)
    PRINTF          reduce using rule 39 (print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 39 (print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 39 (print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON .)
    NUM_INT         reduce using rule 39 (print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON .)
    NUM_DEC         reduce using rule 39 (print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON .)
    TEXTO           reduce using rule 39 (print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 39 (print_stmt -> PRINTF LPAREN expression RPAREN SEMICOLON .)


state 122

    (32) selection_stmt -> IF LPAREN expression RPAREN statement ELSE . statement
    (24) statement -> . expression_stmt
    (25) statement -> . compound_stmt
    (26) statement -> . selection_stmt
    (27) statement -> . iteration_stmt
    (28) statement -> . return_stmt
    (29) statement -> . print_stmt
    (30) expression_stmt -> . expression SEMICOLON
    (31) expression_stmt -> . SEMICOLON
    (19) compound_stmt -> . LBRACE local_declarations statement_list RBRACE
    (32) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) selection_stmt -> . IF LPAREN expression RPAREN statement
    (34) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (35) iteration_stmt -> . FOR LPAREN expression_stmt expression_stmt expression RPAREN statement
    (36) return_stmt -> . RETURN SEMICOLON
    (37) return_stmt -> . RETURN expression SEMICOLON
    (38) print_stmt -> . PRINTF LPAREN TEXTO RPAREN SEMICOLON
    (39) print_stmt -> . PRINTF LPAREN expression RPAREN SEMICOLON
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 93
    LBRACE          shift and go to state 57
    IF              shift and go to state 94
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    RETURN          shift and go to state 97
    PRINTF          shift and go to state 98
    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    expression                     shift and go to state 92
    statement                      shift and go to state 124
    expression_stmt                shift and go to state 86
    compound_stmt                  shift and go to state 87
    selection_stmt                 shift and go to state 88
    iteration_stmt                 shift and go to state 89
    return_stmt                    shift and go to state 90
    print_stmt                     shift and go to state 91
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 123

    (35) iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN . statement
    (24) statement -> . expression_stmt
    (25) statement -> . compound_stmt
    (26) statement -> . selection_stmt
    (27) statement -> . iteration_stmt
    (28) statement -> . return_stmt
    (29) statement -> . print_stmt
    (30) expression_stmt -> . expression SEMICOLON
    (31) expression_stmt -> . SEMICOLON
    (19) compound_stmt -> . LBRACE local_declarations statement_list RBRACE
    (32) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) selection_stmt -> . IF LPAREN expression RPAREN statement
    (34) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (35) iteration_stmt -> . FOR LPAREN expression_stmt expression_stmt expression RPAREN statement
    (36) return_stmt -> . RETURN SEMICOLON
    (37) return_stmt -> . RETURN expression SEMICOLON
    (38) print_stmt -> . PRINTF LPAREN TEXTO RPAREN SEMICOLON
    (39) print_stmt -> . PRINTF LPAREN expression RPAREN SEMICOLON
    (40) expression -> . assignment
    (41) expression -> . simple_expression
    (42) assignment -> . var ASSIGN expression
    (43) assignment -> . var ADD_ASSIGN expression
    (44) assignment -> . var SUB_ASSIGN expression
    (45) assignment -> . var MUL_ASSIGN expression
    (46) assignment -> . var DIV_ASSIGN expression
    (47) assignment -> . var MOD_ASSIGN expression
    (50) simple_expression -> . additive_expression relop additive_expression
    (51) simple_expression -> . additive_expression
    (48) var -> . ID
    (49) var -> . ID LBRACKET expression RBRACKET
    (58) additive_expression -> . additive_expression addop term
    (59) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . var
    (69) factor -> . call
    (70) factor -> . NUM_INT
    (71) factor -> . NUM_DEC
    (72) factor -> . TEXTO
    (73) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 93
    LBRACE          shift and go to state 57
    IF              shift and go to state 94
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    RETURN          shift and go to state 97
    PRINTF          shift and go to state 98
    ID              shift and go to state 18
    LPAREN          shift and go to state 26
    NUM_INT         shift and go to state 28
    NUM_DEC         shift and go to state 29
    TEXTO           shift and go to state 30

    expression_stmt                shift and go to state 86
    expression                     shift and go to state 92
    statement                      shift and go to state 125
    compound_stmt                  shift and go to state 87
    selection_stmt                 shift and go to state 88
    iteration_stmt                 shift and go to state 89
    return_stmt                    shift and go to state 90
    print_stmt                     shift and go to state 91
    assignment                     shift and go to state 20
    simple_expression              shift and go to state 21
    var                            shift and go to state 22
    additive_expression            shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 25
    call                           shift and go to state 27

state 124

    (32) selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 32 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 32 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 32 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 32 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 32 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 32 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 32 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINTF          reduce using rule 32 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 32 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 32 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUM_INT         reduce using rule 32 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUM_DEC         reduce using rule 32 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    TEXTO           reduce using rule 32 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 32 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)


state 125

    (35) iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement .

    RBRACE          reduce using rule 35 (iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement .)
    SEMICOLON       reduce using rule 35 (iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement .)
    LBRACE          reduce using rule 35 (iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement .)
    IF              reduce using rule 35 (iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement .)
    WHILE           reduce using rule 35 (iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement .)
    FOR             reduce using rule 35 (iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement .)
    RETURN          reduce using rule 35 (iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement .)
    PRINTF          reduce using rule 35 (iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement .)
    ID              reduce using rule 35 (iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement .)
    LPAREN          reduce using rule 35 (iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement .)
    NUM_INT         reduce using rule 35 (iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement .)
    NUM_DEC         reduce using rule 35 (iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement .)
    TEXTO           reduce using rule 35 (iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement .)
    ELSE            reduce using rule 35 (iteration_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 110 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 117 resolved as shift
